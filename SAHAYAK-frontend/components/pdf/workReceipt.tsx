import React from "react";
import * as Print from "expo-print";
import * as FileSystem from "expo-file-system/legacy";
import * as MediaLibrary from "expo-media-library";
import { Asset } from "expo-asset";
import Toast from "react-native-toast-message";
import * as SecureStore from "expo-secure-store";
import { Platform } from "react-native";

type ReceiptData = {
  worker_id: string;
  org_name: string;
  work_id: string;
  date: string;
  shift: string;
  entry_time: string;
  leaving_time: string;
  wage_per_hour: number;
  amount: number;
};

export const generatePDF = async (
  receiptData: ReceiptData,
  logoUri: number
) => {
  try {
    const asset = Asset.fromModule(logoUri);
    await asset.downloadAsync();
    const base64Logo = await FileSystem.readAsStringAsync(asset.localUri!, {
      encoding: "base64",
    });

    const html = `
        <!DOCTYPE html>
        <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <style>
              body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f8f9fa;
              }
              .header {
                display: flex;
                align-items: center;
                justify-content: center;
                flex-direction: column;
                text-align: center;
                background-color: #1ABC9C;
                color: white;
                padding: 10px 0;
                border-radius: 10px;
              }
              .header img {
                height: 60px;
                margin-bottom: 5px;
              }
              .header h1 {
                margin: 0;
                font-size: 22px;
              }
              .sub-header {
                font-size: 14px;
                color: #fff;
                margin: 0;
              }
              .section {
                background: #ffffff;
                margin-top: 20px;
                padding: 15px;
                border-radius: 10px;
                box-shadow: 0 0 6px rgba(0, 0, 0, 0.08);
              }
              table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 10px;
              }
              td {
                padding: 8px;
                border-bottom: 1px solid #eee;
              }
              td.label {
                font-weight: bold;
                color: #2C3E50;
                width: 40%;
              }
              td.value {
                text-align: right;
                color: #555;
              }
              .footer {
                text-align: center;
                font-size: 12px;
                margin-top: 25px;
                color: #666;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <img src="data:image/png;base64,${base64Logo}" alt="logo" />
              <h1>SRAM</h1>
              <p class="sub-header">Shramik Rights and Account Management</p>
              <p class="sub-header">Government of Madhya Pradesh</p>
            </div>

            <div class="section">
              <h3 style="text-align:center; color:#2C3E50; margin-top:0;">Worker Payment Receipt</h3>
              <table>
                <tr><td class="label">Worker ID</td><td class="value">${receiptData.worker_id}</td></tr>
                <tr><td class="label">Organization Name</td><td class="value">${receiptData.org_name}</td></tr>
                <tr><td class="label">Work ID</td><td class="value">${receiptData.work_id}</td></tr>
                <tr><td class="label">Date</td><td class="value">${receiptData.date}</td></tr>
                <tr><td class="label">Shift</td><td class="value">${receiptData.shift}</td></tr>
                <tr><td class="label">Entry Time</td><td class="value">${receiptData.entry_time}</td></tr>
                <tr><td class="label">Leaving Time</td><td class="value">${receiptData.leaving_time}</td></tr>
                <tr><td class="label">Wage per Hour</td><td class="value">₹${receiptData.wage_per_hour}</td></tr>
                <tr><td class="label">Total Amount</td><td class="value"><b>₹${receiptData.amount}</b></td></tr>
              </table>
            </div>

            <div class="footer">
              <p>Digitally generated by <b>SRAM</b></p>
            </div>
          </body>
        </html>
      `;

    const { uri } = await Print.printToFileAsync({ html });
    const fileName = `WorkerReceipt_${receiptData.worker_id}.pdf`;

    if (Platform.OS === "ios") {
      const newPath = FileSystem.documentDirectory + fileName;
      await FileSystem.moveAsync({ from: uri, to: newPath });
      Toast.show({
        type: "success",
        text1: "PDF Saved",
        text2: `Saved to Documents: ${newPath}`,
      });
      console.log("PDF saved at:", newPath);
    } else if (Platform.OS === "android") {
      let directoryUri = await SecureStore.getItemAsync(
        "pdfDownloadDirectoryUri"
      );

      if (!directoryUri) {
        const permissions = await (
          FileSystem as any
        ).StorageAccessFramework.requestDirectoryPermissionsAsync();
        if (!permissions.granted) {
          Toast.show({ type: "error", text1: "Permission denied!" });
          return;
        }
        directoryUri = permissions.directoryUri;
        await SecureStore.setItemAsync("pdfDownloadDirectoryUri", directoryUri? directoryUri: "downloads");
      }

      if (!directoryUri) {
        Toast.show({
          type: "error",
          text1: "Error",
          text2: "Could not determine download directory.",
        });
        return;
      }

      const pdfData = await FileSystem.readAsStringAsync(uri, {
        encoding: FileSystem.EncodingType.Base64,
      });

      const newFileUri = await (
        FileSystem as any
      ).StorageAccessFramework.createFileAsync(
        directoryUri,
        fileName,
        "application/pdf"
      );

      await FileSystem.writeAsStringAsync(newFileUri, pdfData, {
        encoding: FileSystem.EncodingType.Base64,
      });

      Toast.show({
        type: "success",
        text1: "PDF Saved",
        text2: `Saved to Downloads folder`,
      });
    }
  } catch (error: any) {
    console.error("PDF Generation Error:", error);
    Toast.show({ type: "error", text1: "Something went wrong!" });
  }
};
